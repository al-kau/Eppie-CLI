# This workflow will publish the project

name: Publish

on:
  workflow_dispatch:
    inputs:
      config-file:
        type: string
        default: "./publish/config.json"

      target-os:
        type: choice
        default: all
        options: 
        - windows
        - linux
        - macos
        - all

      target-runtime:
        type: choice
        default: all
        options: 
        - x86
        - x64
        - arm
        - arm64
        - all

env:
  dotnet-version: 8.x
        
jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.publish-config-parser.outputs.profiles }}
      status: ${{ steps.checker.outputs.status }}
      project-file: ${{ steps.publish-config-parser.outputs.project-file }}
      output-name: ${{ steps.publish-config-parser.outputs.output-name }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Parse configuration "${{ github.event.inputs.config-file }}"
      id: publish-config-parser
      uses: ./.github/actions/publish-config-parser
      with:
        config-file: ${{ github.event.inputs.config-file }}
        tags: "${{ github.event.inputs.target-os }},${{ github.event.inputs.target-runtime }}"

    - name: Check profiles
      id: checker
      run: |
        profiles='${{ steps.publish-config-parser.outputs.profiles }}'
        length=$( echo $profiles | jq '.include | length' )

        if(( $length > 0 )); then
           echo "status=success" >> $GITHUB_OUTPUT
         else
           echo "status=failure" >> $GITHUB_OUTPUT
           echo "No suitable publish profile found"
         fi
    
  publish:
    name: Publish
    needs: prepare
    if: needs.prepare.outputs.status == 'success'
    
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}

    env:
      output-name: ${{ needs.prepare.outputs.output-name }}
      project-file: ${{ needs.prepare.outputs.project-file }}
      configuration: ${{ matrix.configuration }}
      framework: ${{ matrix.framework }}
      runtime: ${{ matrix.runtime }}
      publish-options: ${{ matrix.options }}
      output-root: publish/output

      # template: root/configuration/framework/runtime
      output-template: '{0}/{1}/{2}/{3}'
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.dotnet-version }}

    - id: version-number
      uses: finebits/github-actions/version-number@v1

    - name: Publish ${{ env.output-name }} [${{ env.version-short }}]
      run: |
        dotnet publish "${{ env.project-file }}" --output "${{ env.output }}" --configuration "${{ env.configuration }}" --framework "${{ env.framework }}" --runtime "${{ env.runtime }}" --property:Version="${{ env.version-full }}" ${{ env.publish-options }} 
      env:
        output: "${{ format(env.output-template, env.output-root, env.configuration, env.framework, env.runtime) }}"
        version-full: "${{ steps.version-number.outputs.suffix-githash-version }}"
        version-short: "${{ steps.version-number.outputs.suffix-version }}"

    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: "${{ env.output-name }}-${{ env.runtime }} [${{ env.version-short }}]"
        path: "${{ env.path }}"
      env:
        artifact-name: "${{ env.output-name }}"
        version-short: "${{ steps.version-number.outputs.suffix-version }}"
        path: "${{ format(env.output-template, env.output-root, env.configuration, env.framework, env.runtime) }}"

  release:
    name: Release
    needs: publish
    permissions:
      contents: write
    
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.1.0-test
        release_name: Release v1.1.0-test
        body: |
          Changes in this Release
            - First Change
            - Second Change
        draft: true
        prerelease: false